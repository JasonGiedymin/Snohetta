package math

import org.scalatest.FreeSpec
import java.util.Date

class BasicSpec extends FreeSpec {

  "BigInt2" - {

    "must be able to add" - {
      "small Integers" in {
        val ONE:BigInt2 = 1
        val TWO:BigInt2 = 2

        assert( (ONE + 1) === TWO)
      }

      "large Integers" in {

        val foo:BigInt2 = BigInt2("11000000000000000000000000000000000342039842039482309482309482304982304982309482309482309483290482390482309482039840293840923840923890482309489023840923894380948348209482093840928020394802394809238409238409238498230948238409238423894823948902384902394823948239849238409238409324089237402374023740872304702349238948239482397402370432742394823849238492384923747237429874398758943785978349579843785728340572039847502934875203948572390485723490857234908572349085723490857234908572439085493506203498650389460194680912386490231864239084791230874903827529308457249805743809687132648796897362489723645802375092874587843674385798763894769382745762315497632478326596234596436523465871267394521376452")
        val bar:BigInt2 = BigInt2("11000000000000000000000000000000000342039842039482309482309482304982304982309482309482309483290482390482309482039840293840923840923890482309489023840923894380948348209482093840928020394802394809238409238409238498230948238409238423894823948902384902394823948239849238409238409324089237402374023740872304702349238948239482397402370432742394823849238492384923747237429874398758943785978349579843785728340572039847502934875203948572390485723490857234908572349085723490857234908572439085493506203498650389460194680912386490231864239084791230874903827529308457249805743809687132648796897362489723645802375092874587843674385798763894769382745762315497632478326596234596436523465871267394521376453")

        assert( (foo + 1) === bar)
      }
    }

    "must be able to subtract" - {
      "small Integers" in {
        val ONE:BigInt2 = 1
        val TWO:BigInt2 = 2

        assert( (TWO - 1) === ONE)
      }

      "large Integers" in {

        val foo:BigInt2 = BigInt2("11000000000000000000000000000000000342039842039482309482309482304982304982309482309482309483290482390482309482039840293840923840923890482309489023840923894380948348209482093840928020394802394809238409238409238498230948238409238423894823948902384902394823948239849238409238409324089237402374023740872304702349238948239482397402370432742394823849238492384923747237429874398758943785978349579843785728340572039847502934875203948572390485723490857234908572349085723490857234908572439085493506203498650389460194680912386490231864239084791230874903827529308457249805743809687132648796897362489723645802375092874587843674385798763894769382745762315497632478326596234596436523465871267394521376452")
        val bar:BigInt2 = BigInt2("11000000000000000000000000000000000342039842039482309482309482304982304982309482309482309483290482390482309482039840293840923840923890482309489023840923894380948348209482093840928020394802394809238409238409238498230948238409238423894823948902384902394823948239849238409238409324089237402374023740872304702349238948239482397402370432742394823849238492384923747237429874398758943785978349579843785728340572039847502934875203948572390485723490857234908572349085723490857234908572439085493506203498650389460194680912386490231864239084791230874903827529308457249805743809687132648796897362489723645802375092874587843674385798763894769382745762315497632478326596234596436523465871267394521376453")

        assert( (bar - 1) === foo)
      }
    }

    "must be able to multiply" - {
      "small Integers" in {
        val ONE:BigInt2 = 1
        val TWO:BigInt2 = 2

        assert( (TWO * ONE) === TWO)
      }

      "large Integers" in {

        val foo:BigInt2 = BigInt
        val bar:BigInt2 = BigInt
        val foobarred:BigInt2 = BigInt

        assert( (foo * bar) === foobarred)
      }
    }

    "must be able to divide" - {
      "small Integers" in {
        val ONE:BigInt2 = 1
        val TWO:BigInt2 = 2

        assert( (TWO / 1) === TWO)
      }

      "large Integers" in {

        val foo:BigInt2 = BigInt
        val bar:BigInt2 = BigInt
        val foobarred:BigInt2 = BigInt

        assert( (foobarred / foo) === bar)
        assert( (foobarred / bar) === foo)
      }
    }

    "must be faster than BigInt" - {

      val invocationCount:Int = 10
      val nSize:Int = 50000 //300000
      val n1:String = "1%s" format "0" * nSize
      val n2:String = "2%s" format "0" * nSize


      lazy val bigInt2Time = {
        val start = new Date()
        (1 to invocationCount).foreach { (i:Int) =>
          val foo:BigInt2 = BigInt2(n2)
          val bar:BigInt2 = BigInt2(n1)
          // mem intensive
          (((foo + bar) * (foo - bar) * (foo * bar) * (foo / bar)) ^ i ^ i ^ ((foo + bar) * (foo - bar) * (foo * bar) * (foo / bar))).unary_-

          // memory conservative, fast
          //foo * bar
        }
        val end = new Date()
        end.getTime - start.getTime
      }

      lazy val bigIntTime = {
        val start = new Date()
        (1 to invocationCount).foreach { (i:Int) =>
          val foo:BigInt = BigInt(n2)
          val bar:BigInt = BigInt(n1)
          // suprisingly memory conservative, but slow
          (((foo + bar) * (foo - bar) * (foo * bar) * (foo / bar)) ^ i ^ i ^ ((foo + bar) * (foo - bar) * (foo * bar) * (foo / bar))).unary_-
        }
        val end = new Date()
        end.getTime - start.getTime
      }

      // 100% CPU
      lazy val becauseScala = {
        val start = new Date()
        (1 to invocationCount).par.foreach { (i:Int) =>
          val foo:BigInt2 = BigInt2(n2)
          val bar:BigInt2 = BigInt2(n1)
          // mem intensive
          (((foo + bar) * (foo - bar) * (foo * bar) * (foo / bar)) ^ i ^ i ^ ((foo + bar) * (foo - bar) * (foo * bar) * (foo / bar))).unary_-

          // memory conservative, fast
          //foo * bar
        }
        val end = new Date()
        end.getTime - start.getTime
      }

      info(s"Scala  BigInt: $bigIntTime ms")
      info(s"Scala BigInt2: $bigInt2Time ms")
      assert(bigIntTime > bigInt2Time)

      info(s"BigInt2 Parallel: $becauseScala ms")
    }

  }

}
